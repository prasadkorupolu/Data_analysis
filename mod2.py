# -*- coding: utf-8 -*-
"""mod2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/17hp-ACT5jbiHdcd7FhB5dCxVjZdRQmlD
"""

import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split as ttp
from sklearn.metrics import classification_report
import re
import string
import matplotlib.pyplot as plt
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error


data_true=pd.read_csv("/content/true_news.csv")
data_fake=pd.read_csv("/content/fake_news.csv")
data_true.head(5)
data_fake.head(5)

data_true.shape, data_fake.shape

data_true["class"]=1
data_fake["class"]=0

data_true_manual_testing = data_true.tail(10)
for i in range(24,14,-1):
  data_true.drop([i],axis=0, inplace=True)
data_fake_manual_testing = data_fake.tail(10)
for i in range(24,14,-1):
  data_fake.drop([i],axis=0, inplace=True)


data_manual_testing = pd.concat([data_fake_manual_testing,data_true_manual_testing], axis=0)
data_manual_testing.to_csv("manual_testing.csv ")

data_merge = pd.concat([data_fake,data_true],axis=0)
print(data_merge)

print(data_merge.groupby(['class'])['text'].count())
print("0 = Fake news\n1 = True news")
data_merge.groupby(['class'])['text'].count().plot(kind="pie")
plt.title("Fake news and True News",size=20)
plt.show()

data = data_merge.drop(["title","label"], axis=1)
data.head(10)

x=data["text"]
y=data["class"]

x_train,x_test,y_train,y_test=ttp(x,y,test_size=0.25,random_state=0)
#X_train, X_test, Y_train, Y_test = train_test_split(x, y, test_size=0.2, random_state=42)

from sklearn.feature_extraction.text import TfidfVectorizer
vector = TfidfVectorizer()
#IDF returns numerical statics that how the word is important to the document
xv_train=vector.fit_transform(x_train)
xv_test=vector.transform(x_test)

#Lgistic Regression:
from sklearn.linear_model import LogisticRegression
LR=LogisticRegression()
LR.fit(xv_train,y_train) #training or fitting the model to the training set
accuracy = LR.score(xv_test,y_test).round(2) # method computes the accuracy‚ê£
print("Accuracy is" , accuracy)
pred_LR= LR.predict(xv_test) # Predict using the linear model
print(classification_report(y_test,pred_LR))

from sklearn.metrics import confusion_matrix
cm= confusion_matrix(y_test,pred_LR)
print(cm)
import seaborn as sns
sns.heatmap(cm,cmap="BuPu",annot=True)

from sklearn.linear_model import LinearRegression
LR=LinearRegression()
LR.fit(x_train,y_train)
y_pred=LR.predict(x_test)

model = LinearRegression()
model.fit(X_train, y_train)

# Make predictions on the test data
y_pred = model.predict(X_test)

# Calculate mean squared error
mse = mean_squared_error(y_test, y_pred)
print("Mean Squared Error:", mse)

# Plot the data and regression line
plt.scatter(X_test, y_test, color='blue')
plt.plot(X_test, y_pred, color='red', linewidth=2)
plt.xlabel('Feature')
plt.ylabel('Target')
plt.title('Linear Regression')
plt.show()

from sklearn.metrics import mean_squared_error
mse = mean_squared_error(y_test, pred_LiR)
#print("Mean Squared Error:", mse)

plt.scatter(x_test, y_test, color='blue')
plt.plot(x_test, pred_LiR, color='red', linewidth=2)

plt.title('Linear Regression')
plt.show()